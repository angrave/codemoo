// Generated by CoffeeScript 1.6.2
(function() {
  "use strict";
  var initializeDoppioEnvironment, load_mini_rt, onResize, root, saveFile,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = window.coderunner = {};

  load_mini_rt = function() {
    var data, done, e, file_count, writeOneFile;

    try {
      data = node.fs.readFileSync("/home/doppio/preload.tar");
    } catch (_error) {
      e = _error;
      console.error(e);
    }
    if (data === null) {
      throw new Error("No mini-rt data");
    }
    file_count = 0;
    done = false;
    writeOneFile = function(percent, path, file) {
      var base, base_dir, cls, ext, _ref;

      base_dir = 'vendor/classes/';
      _ref = path.split('.'), base = _ref[0], ext = _ref[1];
      file_count++;
      cls = base.substr(base_dir.length);
      return node.fs.writeFileSync(path, util.array_to_bytestr(file), 'utf8', true);
    };
    return untar(new util.BytesArray(util.bytestr_to_array(data)), writeOneFile);
  };

  saveFile = function(fname, contents) {
    if (contents[contents.length - 1] !== '\n') {
      contents += '\n';
    }
    return node.fs.writeFileSync(fname, contents);
  };

  initializeDoppioEnvironment = function() {
    var read_classfile;

    if (root.doppioEnvironmentInitialized) {
      return;
    }
    load_mini_rt();
    read_classfile = function(cls, cb, failure_cb) {
      var data, e, fullpath, path, _i, _len, _ref;

      cls = cls.slice(1, -1);
      _ref = jvm.system_properties['java.class.path'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        fullpath = "" + path + cls + ".class";
        try {
          data = util.bytestr_to_array(node.fs.readFileSync(fullpath));
        } catch (_error) {
          e = _error;
          data = null;
        }
        if (data !== null) {
          return cb(data);
        }
      }
      return failure_cb(function() {
        throw new Error("Error: No file found for class " + cls + ".");
      });
    };
    root._bs_cl = new ClassLoader.BootstrapClassLoader(read_classfile);
    return root.doppioEnvironmentInitialized = true;
  };

  onResize = function() {
    return $('#source').height(Math.min(50, $(window).height() * 0.25));
  };

  window.CodeRunner = (function() {
    CodeRunner.prototype.stdout = null;

    CodeRunner.prototype.user_input = null;

    function CodeRunner() {
      this.run = __bind(this.run, this);
      this.edit = __bind(this.edit, this);
      var JavaMode,
        _this = this;

      this.rs = null;
      this.runJavaBtn = $('#run_btn');
      this.stopJavaBtn = $('#abort_btn');
      this.outputDiv = $('#output');
      this.editor = ace.edit('source');
      this.session = this.editor.getSession();
      JavaMode = require("ace/mode/java").Mode;
      this.session.setMode(new JavaMode());
      this.session.setValue("for(int i=0;i<10;i++) {print(i);}\nclasses.doppio.JavaScript.eval(\"alert(1)\");");
      this.stopJavaBtn.attr("disabled", true);
      this.runJavaBtn.click(function(e) {
        _this.run();
        return e.preventDefault();
      });
      onResize();
      return;
    }

    CodeRunner.prototype.edit = function() {
      this.editor.focus();
      return this;
    };

    CodeRunner.prototype.run = function() {
      var class_args, contents, finish_cb, fname, msg, stdin, stdout,
        _this = this;

      this.outputDiv.text('Starting...3..');
      initializeDoppioEnvironment();
      this.outputDiv.text(this.outputDiv.text() + '2..');
      fname = "program.bsh";
      contents = this.session.getValue();
      saveFile(fname, contents);
      msg = '';
      stdout = function(str) {
        msg += str;
        return _this.outputDiv.text(msg);
      };
      stdin = function() {
        return "\n";
      };
      class_args = [fname];
      finish_cb = function() {
        return _this.outputDiv.text('Done');
      };
      this.rs = null;
      this.rs = new runtime.RuntimeState(stdout, stdin, root._bs_cl);
      jvm.set_classpath('/home/doppio/vendor/classes/', './');
      this.outputDiv.text(this.outputDiv.text() + '1..');
      this.stopJavaBtn.click(function(e) {
        var aborted_cb;

        if (_this.rs) {
          stdout('Stopping...');
          _this.stopJavaBtn.attr("disabled", true);
          aborted_cb = function() {
            _this.rs = null;
            stdout('Stopped');
            return _this.runJavaBtn.attr("disabled", false);
          };
          _this.rs.async_abort(aborted_cb);
          return e.preventDefault();
        }
      });
      this.runJavaBtn.attr("disabled", true);
      this.stopJavaBtn.attr("disabled", false);
      finish_cb = function() {
        _this.stopJavaBtn.attr("disabled", true);
        _this.runJavaBtn.attr("disabled", false);
        return _this.edit();
      };
      this.outputDiv.text('');
      jvm.run_class(this.rs, 'bsh/Interpreter', class_args, finish_cb);
      return this;
    };

    return CodeRunner;

  })();

  $(document).ready(function() {
    load_mini_rt();
    return new window.CodeRunner();
  });

}).call(this);
