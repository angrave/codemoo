// Generated by CoffeeScript 1.6.2
(function() {
  "use strict";
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.DoppioApi = (function() {
    /*
        A class to interact with doppio with.
        Please do not call the constructor until the entire document has loaded
        (this is usually accomplished with jQuery(document).onReady)
    */
    function DoppioApi(stdout, log, beanshellWrapperName) {
      this.stdout = stdout;
      this.log = log;
      this.beanshellWrapperName = beanshellWrapperName;
      this.abort = __bind(this.abort, this);
      this.run = __bind(this.run, this);
      /*
          Sets up Doppio environment.
          @stdout (msg) ->
              A function that will receive messages from the executing java code.
          @log (msg) ->
              A function that will receive log messages such as total execution
              time or abort requests. Set to null to disable logging.
      */

      this.load_mini_rt();
      this.bs_cl = new ClassLoader.BootstrapClassLoader(this.read_classfile);
      jvm.set_classpath('/home/doppio/vendor/classes/', './');
      this.rs = null;
      return;
    }

    DoppioApi.prototype.setOutputFunctions = function(stdout, log) {
      this.stdout = stdout;
      this.log = log;
    };

    DoppioApi.prototype.read_classfile = function(cls, cb, failure_cb) {
      /*
          Used internally in Doppio.
          Read in a binary classfile synchronously. Return an array of bytes.
      */

      var data, e, fullpath, path, _i, _len, _ref;

      cls = cls.slice(1, -1);
      _ref = jvm.system_properties['java.class.path'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        fullpath = "" + path + cls + ".class";
        try {
          data = util.bytestr_to_array(node.fs.readFileSync(fullpath));
        } catch (_error) {
          e = _error;
          data = null;
        }
        if (data !== null && data.length > 0) {
          return cb(data);
        }
      }
      return failure_cb(function() {
        throw new Error("Error: No file found for class " + cls + ".");
      });
    };

    DoppioApi.prototype.load_mini_rt = function() {
      /*
          Loads the compressed pre-compiled java classes for Doppio
      */

      var data, done, e, end_untar, file_count, start_untar, writeOneFile;

      try {
        data = node.fs.readFileSync("/home/doppio/preload.tar");
      } catch (_error) {
        e = _error;
        console.error(e);
      }
      if (data === null) {
        throw new Error("No mini-rt data");
      }
      file_count = 0;
      done = false;
      start_untar = (new Date()).getTime();
      writeOneFile = function(percent, path, file) {
        var base, base_dir, cls, ext, _ref;

        base_dir = 'vendor/classes/';
        _ref = path.split('.'), base = _ref[0], ext = _ref[1];
        file_count++;
        cls = base.substr(base_dir.length);
        if (file.length > 0) {
          node.fs.writeFileSync(path, util.array_to_bytestr(file), 'utf8', true);
        }
      };
      untar(new util.BytesArray(util.bytestr_to_array(data)), writeOneFile);
      end_untar = (new Date()).getTime();
      return typeof this.log === "function" ? this.log("Untarring took a total of " + (end_untar - start_untar) + "ms.") : void 0;
    };

    DoppioApi.prototype.run = function(studentCode, beanshellWrapperName, finished_cb) {
      /*
          Runs the given Java Code.
          Note, this does not recognize classes.
      */

      var class_args, finish_cb, fname, start_time, stdin,
        _this = this;

      start_time = (new Date()).getTime();
      if (typeof this.log === "function") {
        this.log('Starting Run');
      }
      fname = 'program.bsh';
      node.fs.writeFileSync(fname, studentCode);
      stdin = function() {
        return "\n";
      };
      if (beanshellWrapperName != null) {
        class_args = [beanshellWrapperName];
      } else {
        class_args = [fname];
      }
      finish_cb = function() {
        var end_time;

        end_time = (new Date()).getTime();
        if (_this.rs !== null) {
          if (typeof _this.log === "function") {
            _this.log('Finished Run');
          }
          if (typeof _this.log === "function") {
            _this.log("Took " + (end_time - start_time) + "ms.");
          }
          _this.rs = null;
        }
        finished_cb();
      };
      this.rs = new runtime.RuntimeState(this.stdout, stdin, this.bs_cl);
      jvm.run_class(this.rs, 'bsh/Interpreter', class_args, finish_cb);
    };

    DoppioApi.prototype.abort = function(finished_cb) {
      /*
          Abort the current run.
      */

      var cb,
        _this = this;

      if (typeof this.log === "function") {
        this.log('User Abort Requested');
      }
      if (this.rs) {
        if (typeof this.log === "function") {
          this.log('Aborting Run');
        }
        cb = function() {
          if (typeof _this.log === "function") {
            _this.log('Aborted Successfully');
          }
          _this.rs = null;
          if (finished_cb != null) {
            return finished_cb();
          }
        };
        this.rs.async_abort(cb);
      } else {
        if (typeof this.log === "function") {
          this.log('No Run Detected');
        }
      }
    };

    return DoppioApi;

  })();

}).call(this);
