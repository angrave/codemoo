// Generated by CoffeeScript 1.6.2
(function() {
  "use strict";
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.DoppioApi = (function() {
    /*
        A class to interact with doppio with.
        Please do not call the constructor until the entire document has loaded
        (this is usually accomplished with jQuery(document).onReady)
    */
    function DoppioApi(stdout, logIgnore) {
      var stdin;

      this.stdout = stdout;
      this.abort = __bind(this.abort, this);
      this.run = __bind(this.run, this);
      this.output = __bind(this.output, this);
      /*
          Sets up Doppio environment.
          @stdout (msg) ->
              A function that will receive messages from the executing java code.
          @log (msg) ->
              A function that will receive log messages such as total execution
              time or abort requests. Set to null to disable logging.
      */

      this.load_mini_rt();
      this.bs_cl = new ClassLoader.BootstrapClassLoader(this.read_classfile);
      jvm.set_classpath('/home/doppio/vendor/classes/', './');
      stdin = function() {
        return "\n";
      };
      this.rs = new runtime.RuntimeState(this.output, stdin, this.bs_cl);
      this.running = false;
      this.preloaded = false;
      return;
    }

    DoppioApi.prototype.setOutputFunctions = function(stdout, log) {
      this.log = log;
      if (!this.running) {
        this.stdout = stdout;
      } else {
        if (typeof console !== "undefined" && console !== null) {
          console.log('Currently running');
        }
        if (!this.updateOutput) {
          if (typeof console !== "undefined" && console !== null) {
            console.log('Will update output when finished');
          }
          this.updateOutput = stdout;
        }
      }
    };

    DoppioApi.prototype.output = function(msg) {
      if (this.stdout != null) {
        this.stdout(msg);
      }
    };

    DoppioApi.prototype.read_classfile = function(cls, cb, failure_cb) {
      /*
          Used internally in Doppio.
          Read in a binary classfile synchronously. Return an array of bytes.
      */

      var data, e, fullpath, path, _i, _len, _ref;

      cls = cls.slice(1, -1);
      _ref = jvm.system_properties['java.class.path'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        fullpath = "" + path + cls + ".class";
        try {
          data = util.bytestr_to_array(node.fs.readFileSync(fullpath));
        } catch (_error) {
          e = _error;
          data = null;
        }
        if (data !== null && data.length > 0) {
          return cb(data);
        }
      }
      return failure_cb(function() {
        throw new Error("Error: No file found for class " + cls + ".");
      });
    };

    DoppioApi.prototype.load_mini_rt = function() {
      /*
          Loads the compressed pre-compiled java classes for Doppio
      */

      var data, done, e, end_untar, file_count, start_untar, writeOneFile;

      try {
        data = node.fs.readFileSync("/home/doppio/preload.tar");
      } catch (_error) {
        e = _error;
        if (typeof console !== "undefined" && console !== null) {
          console.error(e);
        }
      }
      if (data === null) {
        throw new Error("No mini-rt data");
      }
      file_count = 0;
      done = false;
      start_untar = (new Date()).getTime();
      writeOneFile = function(percent, path, file) {
        var base, base_dir, cls, ext, _ref;

        base_dir = 'vendor/classes/';
        _ref = path.split('.'), base = _ref[0], ext = _ref[1];
        file_count++;
        cls = base.substr(base_dir.length);
        if (file.length > 0) {
          node.fs.writeFileSync(path, util.array_to_bytestr(file), 'utf8', true);
        }
      };
      untar(new util.BytesArray(util.bytestr_to_array(data)), writeOneFile);
      end_untar = (new Date()).getTime();
      if (typeof console !== "undefined" && console !== null) {
        console.log("Untarring took a total of " + (end_untar - start_untar) + "ms.");
      }
    };

    DoppioApi.prototype.run = function(studentCode, gameContext, finished_cb) {
      /*
          Runs the given Java Code.
      */

      var class_args, finish_cb, start_time,
        _this = this;

      if (this.running) {
        if (this.preloaded) {
          if (typeof console !== "undefined" && console !== null) {
            console.log('Already Running, not re-starting run');
          }
          finished_cb(false);
        } else {
          if (typeof console !== "undefined" && console !== null) {
            console.log('Not finished preloading, will run after preload finishes');
          }
          this.firstRun = this.run.bind(this, studentCode, gameContext, finished_cb);
        }
        return;
      }
      start_time = (new Date()).getTime();
      if (this.rs.is_abort_requested) {
        this.rs.abort_requested = null;
      }
      if (typeof console !== "undefined" && console !== null) {
        console.log('Starting Run');
      }
      class_args = [studentCode];
      finish_cb = function() {
        var end_time;

        end_time = (new Date()).getTime();
        if (_this.running) {
          if (typeof console !== "undefined" && console !== null) {
            console.log('Finished Run');
          }
          if (typeof console !== "undefined" && console !== null) {
            console.log("Took " + (end_time - start_time) + "ms.");
          }
          _this.running = false;
        }
        if (_this.updateOutput != null) {
          _this.setOutputFunctions(_this.updateOutput, _this.log);
          _this.updateOutput = null;
        }
        finished_cb(true);
      };
      this.running = true;
      if (gameContext) {
        jvm.run_class(this.rs, 'codemoo/RunGame', class_args, finish_cb);
      } else {
        jvm.run_class(this.rs, 'codemoo/Run', class_args, finish_cb);
      }
    };

    DoppioApi.prototype.preload = function(preloadFunctions, finished_cb) {
      var class_args, finish_cb, start_time,
        _this = this;

      if (this.running) {
        if (typeof console !== "undefined" && console !== null) {
          console.log('Busy Running');
        }
        finished_cb(false);
        return;
      }
      if (typeof console !== "undefined" && console !== null) {
        console.log('Starting Preload');
      }
      class_args = [preloadFunctions];
      finish_cb = function() {
        var end_time;

        end_time = (new Date()).getTime();
        if (_this.running) {
          if (typeof console !== "undefined" && console !== null) {
            console.log('Preloading Finished');
          }
          if (typeof console !== "undefined" && console !== null) {
            console.log("Took " + (end_time - start_time) + "ms.");
          }
          _this.running = false;
        }
        if (_this.updateOutput != null) {
          _this.setOutputFunctions(_this.updateOutput, _this.log);
          _this.updateOutput = null;
        }
        finished_cb(true);
        _this.preloaded = true;
        if (_this.firstRun) {
          _this.firstRun();
          _this.firstRun = null;
        }
      };
      this.running = true;
      start_time = (new Date()).getTime();
      jvm.run_class(this.rs, 'codemoo/Preload', class_args, finish_cb);
    };

    DoppioApi.prototype.abort = function(finished_cb) {
      /*
          Abort the current run.
      */

      var cb;

      if (typeof console !== "undefined" && console !== null) {
        console.log('User Abort Requested');
      }
      if (this.running) {
        if (this.preloaded) {
          if (typeof console !== "undefined" && console !== null) {
            console.log('Aborting Run');
          }
          cb = function() {
            if (typeof console !== "undefined" && console !== null) {
              console.log('Aborted Successfully');
            }
            this.running = false;
            if (finished_cb != null) {
              return finished_cb();
            }
          };
          this.rs.async_abort(cb);
        } else {
          if (typeof console !== "undefined" && console !== null) {
            console.log('Cannot Abort Preloading');
          }
          if (finished_cb != null) {
            finished_cb();
          }
        }
      } else {
        if (typeof console !== "undefined" && console !== null) {
          console.log('No Run Detected');
        }
        if (finished_cb != null) {
          finished_cb();
        }
      }
    };

    return DoppioApi;

  })();

}).call(this);
