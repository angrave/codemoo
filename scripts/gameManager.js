// Generated by CoffeeScript 1.6.2
(function() {
  var debugging, deepcopy, log,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debugging = true;

  if (debugging) {
    log = function(mesg) {
      return console.log(mesg);
    };
  } else {
    log = function(mesg) {
      return null;
    };
  }

  log("GameManager log");

  if (typeof deepcopy === "undefined" || deepcopy === null) {
    deepcopy = function(src) {
      return $.extend(true, {}, src);
    };
  }

  window.GameManager = (function() {
    function GameManager(environment) {
      this.environment = environment;
      this.helpTips = __bind(this.helpTips, this);
      this.showRun = __bind(this.showRun, this);
      this.stopStudentCode = __bind(this.stopStudentCode, this);
      this.runStudentCode = __bind(this.runStudentCode, this);
      this.reset = __bind(this.reset, this);
      this.commandsValid = __bind(this.commandsValid, this);
      this.startGame = __bind(this.startGame, this);
      this.gameName = __bind(this.gameName, this);
      this.config = deepcopy(this.environment.description);
      this.gameStateBase = this.environment.gameState;
      this.editorDiv = 'codeEditor';
      this.visualDiv = 'gameVisual';
      this.setUpGame();
      return;
    }

    GameManager.prototype.storeStats = function() {
      return this.environment.codeland.storeGameStats(this.environment.key, this.environment.stats);
    };

    GameManager.prototype.setUpGame = function() {
      /*
          Sets up everything for the game to run.
      */

      var butdiv, editdiv, vis;

      this.gameDiv = jQuery(this.environment.gamediv);
      this.gameDiv.empty();
      editdiv = document.createElement("div");
      vis = document.createElement("div");
      butdiv = document.createElement("div");
      $(editdiv).attr({
        'id': this.editorDiv,
        'class': 'code_editor'
      });
      $(editdiv).css({
        width: '60%',
        height: '80%',
        'position': 'absolute',
        'top': '10%',
        'left': '3.3%',
        "background-color": "#366CA3",
        "border": "4px double #3F80C0"
      });
      this.gameDiv.append(editdiv);
      $(vis).attr({
        'id': this.visualDiv
      });
      $(vis).css({
        width: '30%',
        height: '80%',
        'position': 'absolute',
        'top': '10%',
        'right': '3.3%',
        "background-color": "#366CA3",
        "border": "4px double #3F80C0"
      });
      this.gameDiv.append(vis);
      $(editdiv).append('<img height="15%" style="position:absolute;bottom:1%;right:1%" alt="Play" id="compileAndRun" src="img/freeware/button_play_green-48px.png" title="Run Code"/>');
      $(editdiv).append('<img height="15%" style="position:absolute;bottom:1%;right:1%" alt="Stop" id="stopRun" src="img/freeware/button_stop_red-48px.png" title="Stop Code"/>');
      $(editdiv).append('<img height="15%" style="position:absolute;bottom:1%;right:8%" alt="Reset" title="Restart level (reset code back to original)" id="resetState" src="img/cc-bynd/undo_yellow-48px.png"/>');
      $(editdiv).append('<img height="15%" style="position:absolute;bottom:1%;right:15%" alt="Help/Tips" title="Help/Tips" id="help" src="img/freeware/info-48px.png"/>');
      jQuery('#stopRun').hide();
      this.codeEditor = new EditorManager(this.editorDiv, this.config.editor, this.config.code);
      this.interpreter = new CodeInterpreter(this.config.editor.commands);
      this.environment.visualMaster.container.id = this.visualDiv;
      this.visual = new GameVisual(this.environment.visualMaster, this.environment.frameRate);
      this.interpretGameConfigMap();
      this.codeEditor.editor.editor.focus();
      this.addEventListeners();
    };

    GameManager.prototype.gameName = function() {
      return this.environment.key;
    };

    GameManager.prototype.startGame = function(waitForCode) {
      if (waitForCode == null) {
        waitForCode = false;
      }
      this.visual.startGame(this.config.visual);
      this.gameState = new window[this.gameStateBase](this, waitForCode);
      this.commandMap = this.gameState.getGameCommands();
    };

    GameManager.prototype.interpretGameConfigMap = function() {
      var achar, character, key, map, name, x, y, _base, _base1, _base2, _base3, _ref, _ref1, _ref2, _ref3, _ref4;

      x = (_ref = (_base = this.config.game.offset).x) != null ? _ref : _base.x = 0;
      y = (_ref1 = (_base1 = this.config.game.offset).y) != null ? _ref1 : _base1.y = 0;
      map = (_ref2 = (_base2 = this.config.game).map) != null ? _ref2 : _base2.map = "";
      while (map !== "") {
        achar = map.substring(0, 1);
        if (achar in this.config.game.key) {
          name = this.config.game.key[achar];
          this.generateCharacter(name, x, y, true);
        }
        if (achar === '\n') {
          y++;
          x = (_ref3 = (_base3 = this.config.game.offset).x) != null ? _ref3 : _base3.x = 0;
        } else {
          x++;
        }
        map = map.substring(1);
      }
      _ref4 = this.config.game.characters;
      for (key in _ref4) {
        character = _ref4[key];
        character.index = this.config.visual.characters.indexOf(character.visual);
      }
    };

    GameManager.prototype.generateCharacter = function(name, x, y, staysOnReset, dir) {
      var base, baseName, gflag, num, numLength, visualBase;

      base = deepcopy(this.config.game.characterBase[name]);
      visualBase = deepcopy(this.config.visual.visualBase[base.sprite]);
      base.x = x;
      base.y = y;
      visualBase.x = x;
      visualBase.y = y;
      if (dir != null) {
        base.dir = dir;
      }
      if (base.dir != null) {
        visualBase.dir = base.dir;
      }
      baseName = name;
      numLength = 1;
      while (name in this.config.game.characters) {
        if (name === baseName) {
          name = name + '1';
        } else {
          num = parseInt(name.substring(name.length - numLength), 10);
          num++;
          name = baseName + num;
          numLength = num.toString().length;
        }
      }
      visualBase.name = name;
      base.visual = visualBase;
      if (staysOnReset) {
        if (name === 'gflag') {
          this.config.visual.characters.unshift(visualBase);
        } else if (name === 'protagonist') {
          if (this.config.visual.characters.length > 0) {
            if (this.config.visual.characters[0].name = 'gflag') {
              gflag = this.config.visual.characters.shift();
              this.config.visual.characters.unshift(visualBase);
              this.config.visual.characters.unshift(gflag);
            }
          } else {
            this.config.visual.characters.push(visualBase);
          }
        } else {
          this.config.visual.characters.push(visualBase);
        }
        this.config.game.characters[name] = base;
      }
      return {
        'game': base,
        'visual': visualBase
      };
    };

    GameManager.prototype.gameLost = function() {
      var messages;

      this.updateGameLostStats();
      playAudio('defeat.ogg');
      messages = ["Try Again!"];
      window.objCloud(400, messages, "body", "30%", "30%", 3, "none", this.gameManager);
      return this.gameRunFinished();
    };

    GameManager.prototype.gameWon = function() {
      var codeland, gameIndex, gameName, messages, questIndex;

      this.updateGameWonStats();
      playAudio('victory.ogg');
      gameName = this.gameName();
      codeland = this.environment.codeland;
      gameIndex = codeland.currentQuest.games.indexOf(gameName);
      questIndex = codeland.quests.indexOf(codeland.currentQuest);
      if (++gameIndex === codeland.currentQuest.games.length) {
        questIndex = ++questIndex % codeland.quests.length;
        gameIndex = 0;
      }
      gameName = codeland.quests[questIndex].games[gameIndex];
      messages = ['Congratulations!'];
      window.objCloud(400, messages, "body", "30%", "30%", 1.5, gameName, this);
      return this.gameRunFinished();
    };

    GameManager.prototype.updateGameLostStats = function() {
      var s;

      s = this.environment.stats;
      s.lostCount += 1;
      s.lastLoss = Date.now();
      if (!s.firstLoss) {
        s.firstLoss = s.lastLoss;
      }
      return this.storeStats();
    };

    GameManager.prototype.updateGameWonStats = function(score, stars) {
      var isNewHiscore, s;

      log("Game Won: " + this.environment.key);
      s = this.environment.stats;
      s.winCount += 1;
      s.passed = true;
      s.lastWin = Date.now();
      if (!s.firstWin) {
        s.firstWin = s.lastWin;
      }
      s.stars = Math.max(stars, s.stars);
      isNewHiscore = s.hiscore < score;
      if (isNewHiscore) {
        s.hiscore = score;
      }
      this.storeStats();
      return isNewHiscore;
    };

    GameManager.prototype.finishGame = function() {
      var _ref;

      if ((_ref = this.gameState) != null) {
        _ref.stopGame();
      }
      this.codeEditor = null;
      this.interpreter = null;
      this.visual = null;
      this.gameState = null;
      this.commandMap = null;
    };

    GameManager.prototype.addEventListeners = function() {
      jQuery('#compileAndRun').click(this.runStudentCode);
      jQuery('#stopRun').click(this.stopStudentCode);
      jQuery('#resetState').click(this.reset);
      jQuery('#help').click(this.helpTips);
      this.codeEditor.onStudentCodeChangeListener(this.startGame.bind(this, false));
      this.codeEditor.onCommandValidation(this.commandsValid);
    };

    GameManager.prototype.commandsValid = function(valid) {
      if (valid) {
        jQuery('#compileAndRun').attr('disabled', false);
        this.canRun = true;
      } else {
        jQuery('#compileAndRun').attr('disabled', true);
        this.canRun = false;
      }
    };

    GameManager.prototype.reset = function() {
      this.environment.stats.resetCount += 1;
      this.storeStats();
      this.codeEditor.resetEditor();
      this.startGame(false);
    };

    GameManager.prototype.runStudentCode = function() {
      var code, finish_cb, stdout;

      if (this.running) {
        return;
      }
      this.running = true;
      code = this.codeEditor.getStudentCode();
      jQuery('#compileAndRun').hide();
      jQuery('#stopRun').show();
      this.environment.stats.runCount += 1;
      this.storeStats();
      if (this.environment.backEnd === 'interpreter') {
        this.codeEditor.scan();
        if (!this.canRun) {
          return;
        }
        this.interpreter.scanText(code);
        this.startGame(true);
        this.interpreter.executeCommands(this.commandMap);
      } else if (this.environment.backEnd === 'doppio') {
        this.codeEditor.scan();
        if (!this.canRun) {
          return;
        }
        stdout = function(mesg) {
          return console.log(mesg);
        };
        this.environment.codeland.doppioAPI.setOutputFunctions(stdout(stdout));
        finish_cb = function() {};
        if (!this.environment.codeland.doppioReady) {
          this.environment.codeland.waitForWrapper(this.runStudentCode);
          this.running = false;
          log('Waiting for Doppio to be compiled');
          return;
        }
        this.startGame(true);
        this.environment.codeland.doppioAPI.run(code, true, finish_cb);
        this.codeEditor.UpdateCommandsStatus(null);
      }
      return false;
    };

    GameManager.prototype.stopStudentCode = function() {
      if (!this.running) {
        return;
      }
      this.environment.stats.abortCount += 1;
      this.storeStats();
      if (this.environment.backEnd === 'doppio') {
        this.environment.codeland.doppioAPI.abort(this.showRun);
      } else {
        this.showRun();
      }
      this.startGame(true);
      return false;
    };

    GameManager.prototype.showRun = function() {
      jQuery('#stopRun').hide();
      jQuery('#compileAndRun').show();
      this.running = false;
    };

    GameManager.prototype.gameRunFinished = function() {
      this.showRun();
    };

    GameManager.prototype.helpTips = function() {
      var conf, ma, title, _ref, _ref1;

      this.environment.stats.tipsCount += 1;
      this.storeStats();
      ma = (_ref = this.config) != null ? (_ref1 = _ref.code) != null ? _ref1.comments : void 0 : void 0;
      if (ma) {
        if (ma.length > 1) {
          title = ma[0];
          ma = ma.slice(1);
          ma[0] = title + '<br>' + ma[0];
        }
        conf = {
          widthpx: 600,
          mesgs: ma,
          parentTag: "body",
          xoffset: "30%",
          yoffset: "30%",
          textscaling: 0.7,
          nextgame: "none",
          gameManager: this.gameManager
        };
        window.objCloud(conf.widthpx, conf.mesgs, conf.parentTag, conf.xoffset, conf.yoffset, conf.textscaling, conf.nextgame, conf.gameManager);
      }
    };

    return GameManager;

  })();

}).call(this);
