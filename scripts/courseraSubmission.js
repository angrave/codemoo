// Generated by CoffeeScript 1.6.2
(function() {
  var coursera, courseraSubmissionBox,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  coursera = void 0;

  window.showCourseraSubmissionBox = function() {
    if (!coursera) {
      coursera = new courseraSubmissionBox();
    }
    coursera.show();
  };

  courseraSubmissionBox = (function() {
    function courseraSubmissionBox() {
      this.submitAllGraders = __bind(this.submitAllGraders, this);
      var _this = this;

      this.backFade = jQuery('<div>', {
        css: {
          'width': '100%',
          'height': '100%',
          'position': 'absolute',
          'z-index': '300',
          'background-color': '#000000',
          'opacity': '.5'
        },
        click: function(clickEvent) {
          _this.backFade.hide();
          _this.courseraSubmitDiv.hide();
        }
      });
      this.courseraSubmitDiv = jQuery('<div>', {
        css: {
          'width': '80%',
          'height': '80%',
          'left': '10%',
          'top': '10%',
          'position': 'absolute',
          'z-index': '301',
          'background-color': '#FFFFFF'
        }
      });
      this.assignmentScoresDiv = jQuery('<div>');
      this.assignmentSubmitDiv = jQuery('<div>');
      this.assignmentFeedbackDiv = jQuery('<div>');
      this.login = jQuery('<input>', {
        type: 'text',
        name: 'submissionLogin',
        placeholder: 'Submission Login'
      });
      this.password = jQuery('<input>', {
        type: 'password',
        name: 'submissionPassword',
        placeholder: 'Submission Password'
      });
      this.submit = jQuery('<input>', {
        type: 'button',
        name: 'submissionButton',
        value: 'Submit to Coursera',
        click: this.submitAllGraders
      });
      this.assignmentSubmitDiv.append('Submission Login: ');
      this.assignmentSubmitDiv.append(this.login);
      this.assignmentSubmitDiv.append('<br />');
      this.assignmentSubmitDiv.append('Submission Password: ');
      this.assignmentSubmitDiv.append(this.password);
      this.assignmentSubmitDiv.append('<br />');
      this.assignmentSubmitDiv.append(this.submit);
      this.courseraSubmitDiv.append(this.assignmentScoresDiv);
      this.courseraSubmitDiv.append(this.assignmentSubmitDiv);
      this.courseraSubmitDiv.append(this.assignmentFeedbackDiv);
      this.backFade.hide();
      this.courseraSubmitDiv.hide();
      jQuery("body").prepend(this.backFade);
      jQuery("body").prepend(this.courseraSubmitDiv);
      return;
    }

    courseraSubmissionBox.prototype.show = function() {
      var game, grader, quest, target, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;

      if (location.toString().indexOf('Fabian') === -1) {
        return;
      }
      this.assignmentScoresDiv.empty();
      _ref = codeland.graders;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        grader = _ref[_i];
        grader.score = 0;
        grader.maxScore = 0;
        _ref1 = grader.targets;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          target = _ref1[_j];
          if (target.type === "game") {
            this.addGameScore(grader, target.key);
          } else if (target.type === "quest") {
            quest = codeland.quests[codeland.questIndexbyQuests[target.key]];
            _ref2 = quest.games;
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              game = _ref2[_k];
              this.addGameScore(grader, game);
            }
          } else {
            if (typeof console !== "undefined" && console !== null) {
              console.log("Unkown grader target type: " + grader.target);
            }
          }
        }
        this.assignmentScoresDiv.append("<p>" + grader.title + ": " + grader.score + " / " + grader.maxScore + " </p>");
      }
      this.backFade.show();
      this.courseraSubmitDiv.show();
    };

    courseraSubmissionBox.prototype.addGameScore = function(grader, game) {
      var gameStatistics;

      gameStatistics = codeland.loadGameStats(game);
      grader.score += gameStatistics.hiscore;
      grader.maxScore += codeland.gameDescriptions[game].maxScore;
    };

    courseraSubmissionBox.prototype.submitAllGraders = function() {
      var grader, _i, _len, _ref;

      _ref = codeland.graders;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        grader = _ref[_i];
        this.submitGrader(grader);
      }
    };

    courseraSubmissionBox.prototype.submitGrader = function(grader) {
      var challengeUrl, getChallengePrompt;

      getChallengePrompt = {
        'email_address': this.login.value,
        'assignment_part_sid': grader.partID,
        'response_encoding': 'delim'
      };
      challengeUrl = "https://class.coursera.org/" + grader.url + "/assignment/challenge";
      jQuery.ajax({
        async: false,
        type: 'POST',
        url: challengeUrl,
        data: getChallengePrompt,
        error: function(jqXHR, textStatus, errorThrown) {
          console.log("Error:");
          console.log(jqXHR);
          console.log(textStatus);
          console.log(errorThrown);
        },
        success: function(data, textStatus, jqXHR) {
          console.log("Success:");
          console.log(data);
          console.log(textStatus);
          console.log(jqXHR);
        }
      });
    };

    return courseraSubmissionBox;

  })();

}).call(this);
